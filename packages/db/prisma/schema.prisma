// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Email {
  id        String   @id @default(cuid())
  mailboxId String
  mailbox   Mailbox  @relation(fields: [mailboxId], references: [id])
  subject   String?  @db.TinyText()
  snippet   String   @db.TinyText()
  body      String   @db.Text()
  html      String?  @db.MediumText()
  createdAt DateTime @default(now())
  raw       String   @db.LongText()

  from       EmailSender?
  recipients EmailRecipiant[]
  categoryId String?
  category   MailboxCategory? @relation(fields: [categoryId], references: [id])

  isSender  Boolean @default(false)
  isRead    Boolean @default(false)
  isStarred Boolean @default(false)

  binnedAt DateTime?
  // perantEmailId String?

  @@index([mailboxId])
  @@index([categoryId])
  @@index([isSender])
  @@index([id])
  // @@index([perantEmailId])
  @@index([binnedAt])
}

model EmailSender {
  emailId String  @id
  address String
  name    String?
  email   Email   @relation(fields: [emailId], references: [id])

  @@index([emailId])
}

model EmailRecipiant {
  id      String  @id @default(cuid())
  emailId String?
  address String
  name    String?
  cc      Boolean @default(false)
  email   Email?  @relation(fields: [emailId], references: [id])

  @@index([emailId])
}

model MailboxCategory {
  id        String  @id @default(cuid())
  mailbox   Mailbox @relation(fields: [mailboxId], references: [id])
  mailboxId String
  name      String
  color     String?
  emails    Email[]

  @@index([mailboxId])
}

model Mailbox {
  id                   String                @id @default(cuid())
  emails               Email[]
  categorys            MailboxCategory[]
  users                MailboxForUser[]
  drafts               DraftEmail[]
  aliases              MailboxAlias[]
  notifications        MailboxNotification[]
  mailboxCustomDomains MailboxCustomDomain[]

  @@index([id])
}

model MailboxAlias {
  id        String   @id @default(cuid())
  mailboxId String
  mailbox   Mailbox  @relation(fields: [mailboxId], references: [id])
  alias     String   @unique
  name      String?
  createdAt DateTime @default(now())
  default   Boolean  @default(false)

  @@unique([mailboxId, alias])
  @@index([mailboxId])
  @@index([alias])
  @@index([mailboxId, alias])
  @@index([default])
}

model MailboxCustomDomain {
  id              String   @id @default(cuid())
  mailboxId       String
  mailbox         Mailbox  @relation(fields: [mailboxId], references: [id])
  domain          String   @unique
  addedAt         DateTime @default(now())
  authKey         String
  // verificationKey String?

  @@unique([mailboxId, domain])
  @@index([mailboxId, domain])
  @@index([domain, authKey])
}

model MailboxDefaultDomain {
  id        String   @id @default(cuid())
  domain    String   @unique
  addedAt   DateTime @default(now())
  authKey   String
  available Boolean? @default(true)

  @@index([domain])
  @@index([domain, authKey])
  @@index([available])
}

model MailboxForUser {
  mailboxId String
  mailbox   Mailbox @relation(fields: [mailboxId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@id([mailboxId, userId])
  @@index([mailboxId])
  @@index([userId])
}

model MailboxNotification {
  id        String    @id @default(cuid())
  mailboxId String
  mailbox   Mailbox   @relation(fields: [mailboxId], references: [id])
  endpoint  String    @unique @db.VarChar(500)
  p256dh    String
  auth      String
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([mailboxId])
}

model User {
  id        String           @id @default(cuid())
  username  String           @unique @db.VarChar(20)
  password  String           @db.VarChar(200)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  admin     Boolean          @default(false)
  mailboxes MailboxForUser[]

  @@index([username])
}

model DraftEmail {
  id        String   @id @default(cuid())
  mailboxId String
  mailbox   Mailbox  @relation(fields: [mailboxId], references: [id])
  subject   String?  @db.TinyText()
  body      String?  @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from String? // EmailAlias
  to   String? @db.MediumText() // JSON { address: string, name?: string, cc?: "cc" | "bcc" | null }[]

  @@index([mailboxId])
}
